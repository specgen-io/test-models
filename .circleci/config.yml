version: 2.1

orbs:
  artifactory: moda/artifactory@0.2.0

parameters:
  specgen-version:
    type: string
    default: 2.0.388

  specgen-version-major:
    type: string
    default: v2

jobs:
  go:
    working_directory: ~/test-models-go
    docker:
      - image: cimg/go:1.16.4
    steps:
      - checkout
      - run:
          name: Test Go models
          command: |
            cd ./go
            go install github.com/specgen-io/specgen/<<pipeline.parameters.specgen-version-major>>@v<< pipeline.parameters.specgen-version >>
            go generate
            mkdir -p ./test-results
            go install github.com/jstemmer/go-junit-report@v0.9.1
            go test ./... -v 2>&1 | go-junit-report > ./test-results/go-test-report.xml
      - store_test_results:
          path: ./go/test-results
  ruby:
    environment:
      SPECGEN_VERSION: << pipeline.parameters.specgen-version >>
    working_directory: ~/test-models-ruby
    docker:
      - image: cimg/ruby:3.0.0
    steps:
      - checkout
      - run:
          name: Test Ruby models
          command: |
            cd ./ruby
            bundle inject specgen "= $SPECGEN_VERSION"
            bundle install
            rake
      - store_test_results:
          path: ./ruby/test-results
  ts-superstruct:
    environment:
      SPECGEN_VERSION: << pipeline.parameters.specgen-version >>
    working_directory: ~/test-models-superstruct
    docker:
      - image: cimg/node:14.15.1
    steps:
      - checkout
      - run:
          name: Test Superstruct models
          command: |
            cd ./ts-superstruct
            npm add specgen.io@$SPECGEN_VERSION
            npm install
            npm run codegen
            mkdir -p ./test-results
            export JEST_JUNIT_OUTPUT_DIR=./test-results
            npm run test
      - store_test_results:
          path: ./ts-superstruct/test-results
  ts-iots:
    environment:
      SPECGEN_VERSION: << pipeline.parameters.specgen-version >>
    working_directory: ~/test-models-iots
    docker:
      - image: cimg/node:14.15.1
    steps:
      - checkout
      - run:
          name: Test Iots models
          command: |
            cd ./ts-iots
            npm add specgen.io@$SPECGEN_VERSION
            npm install
            npm run codegen
            mkdir -p ./test-results
            export JEST_JUNIT_OUTPUT_DIR=./test-results
            npm run test
      - store_test_results:
          path: ./ts-iots/test-results         
  scala-circe:
    environment:
      SPECGEN_VERSION: << pipeline.parameters.specgen-version >>
    working_directory: ~/test-models-circe
    docker:
      - image: circleci/openjdk:8-jdk
    steps:
      - checkout
      - restore_cache:
          keys:
            - cache-{{ checksum "./scala-circe/build.sbt" }}
      - artifactory/setup-sbt:
          jfrog-server-url: specgen.jfrog.io
          repo-name: sbt
      - run:
          name: Test Circe models
          command: |
            cd ./scala-circe
            mkdir -p ./test-results
            sbt -Djunitxml=./test-results test < /dev/null
      - store_test_results:
          path: ./scala-circe/test-results
      - save_cache:
          key: cache-{{ checksum "./scala-circe/build.sbt" }}
          paths:
            - ~/.sbt
            - ~/.ivy2   
  java:
    working_directory: ~/test-models-java
    docker:
      - image: circleci/openjdk:8-jdk
    steps:
      - checkout
      - restore_cache:
          keys:
            - cache-{{ checksum "./java/pom.xml" }}
      - setup-artifactory-maven:
          jfrog-server-url: specgen.jfrog.io
          repo-name: maven
      - run:
          name: Test Maven models
          command: |
            cd ./java
            mkdir -p ./test-results
            mvn clean -Djunitxml=./test-results test < -Dspecgen.version=<<pipeline.parameters.specgen-version>>
      - store_test_results:
          path: ./java/test-results
      - save_cache:
          key: cache-{{ checksum "./java/pom.xml" }}
          paths:
            - ~/.ivy2                  

commands:
  setup-artifactory-maven:
    parameters:
      jfrog-server-url:
        type: string
      repo-name:
        type: string
    steps:
      - run:
          name: Setup Artifactory for Maven
          command: |
            mkdir -p ~/.m2
            tee > ~/.m2/settings.xml \<<END
            <?xml version="1.0" encoding="UTF-8"?>
            <settings xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.2.0 http://maven.apache.org/xsd/settings-1.2.0.xsd" xmlns="http://maven.apache.org/SETTINGS/1.2.0"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
              <servers>
                <server>
                  <id>artifactory</id>
                  <username>$JFROG_USER</username>
                  <password>$JFROG_PASS</password>
                </server>
              </servers>
              <profiles>
                <profile>
                  <id>artifactory</id>
                  <repositories>
                    <repository>
                      <id>artifactory</id>
                      <name>maven</name>
                      <url>https://<<parameters.jfrog-server-url>>/artifactory/<<parameters.repo-name>></url>
                    </repository>
                  </repositories>
                  <pluginRepositories>
                    <pluginRepository>
                      <id>artifactory</id>
                      <name>maven</name>
                      <url>https://specgen.jfrog.io/artifactory/maven</url>
                    </pluginRepository>
                  </pluginRepositories>
                  <activation>
                    <activeByDefault>true</activeByDefault>
                  </activation>
                </profile>
              </profiles>
            </settings>
            END

workflows:
  build-test:
    jobs:
      - go:
          context: specgen
      - ruby:
          context: specgen
      - ts-superstruct:
          context: specgen
      - ts-iots:
          context: specgen
      - scala-circe:
          context: specgen
      - java:
          context: specgen